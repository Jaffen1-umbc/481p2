#######################################################
#	UDP - Tic-Tac-Toe Documentation and Explination   #
#                                                     #
#                                                     #
#   Noah Jaffe                                        #
#   UDP Socket Programming                            #
#   CMSC 481                                          #
#   12/05/2018                                        #
#######################################################

#######################################################
#                   HOW TO USE                        #
#######################################################

To start the server:
	> python3 ttts.c [-d]
	
	*Note: command line arguments accepted:
		-d
			Debug - optional
			Will enable debug output for the server.
			
-------------------------------------------------------
To start the client:
	> python3 [-c] [-s serverIP] [-d]
	
	*Note: command line arguments accepted:
		-s serverIP
			Server IP - required 
			Specifies the IP address of the server.
		-c
			Client Start - optional
			If the '-c' option is used, the client 
			will make the first move, otherwise, the 
			server AI will make the first move.
		-d
			Debug - optional
			Will enable debug output for the server.
	
#######################################################
#                    THE PROTOCOL                     #
#######################################################
#        SEE ttt.py FOR THE CODE AND FUNCTIONS        #
#######################################################

#######################################################
#                   SERVER SIDE:                      #
#######################################################

*Notes:
	This TTT server uses a non-blocking datagram 
	socket.
	
	The server has a game watcher function that will 
	try to resend the last message sent after not 
	hearing a response from the client for 
	TTT_PRTCL_TIMEOUT seconds.
	
	After TTT_PRTCL_MAX_TIMEOUT seconds, the game will 
	assume the user has disconnected and will delete 
	the game from its database.
	
#######################################################
#       PROTOCOL FOR SERVER SENDING TO CLIENT:        #
#######################################################
*see ttt module function: ttt_send_server_msg_to_client

	1. SEND the packed ('!I') encoded message length 
	2. SEND the encoded message  					
	3. SEND the packed ('!I') expecting response value

#######################################################
#      PROTOCOL FOR SERVER RECIEVING FROM CLIENT      #
#######################################################
*see ttt module function: ttt_recv_server_msg_from_client

	1. RECV a packed ('!I') value

#######################################################
#                   CLIENT SIDE:                      #
#######################################################


#######################################################
#        PROTOCOL FOR CLIENT SENDING TO SERVER:       #
#######################################################
*see ttt module function: ttt_send_client_msg_to_server

	1. SEND a packed ('!I') value
			
#######################################################
#      PROTOCOL FOR CLIENT RECIEVING FROM SERVER:     #
#######################################################
*see ttt module function: ttt_recv_client_msg_from_server
			
	1. RECV the packed ('!I') encoded message length
	2. RECV the encoded message
	3. RECV the packed ('!I') expecting response value
	
	
#######################################################
#                CONSTANTS AND GLOBALS:               #
#######################################################
-------------------------------------------------------
#######################################################
#                    FIRST ARGS                       #
# - valid values for when the server requests the     #
#   first arguments from the client                   #
#######################################################
_TTT_SERVER_FIRST_	=	0
-------------------------------------------------------
_TTT_CLIENT_FIRST_	=	1
#######################################################
#               EXPECTING RESPONSE VALS               #
#######################################################
_TTT_PRTCL_TERMINATE_						=	9
-------------------------------------------------------
_TTT_PRTCL_EXPECTING_NO_RESPONSE_			=	1
-------------------------------------------------------
_TTT_PRTCL_EXPECTING_INT_RESPONSE_			=	2
-------------------------------------------------------
_TTT_PRTCL_EXPECTING_FIRST_ARGS_RESPONSE_	=	3
#######################################################
#                   TIMEOUT VALS                      #
# - seconds of timeout between server resends         #
# - seconds of no communication until server assumes  #
#   client quit                                       #
#######################################################
_TTT_PRTCL_TIMEOUT_		=	5 
-------------------------------------------------------
_TTT_PRTCL_MAX_TIMEOUT_	=	600
#######################################################
#                  SEND & RECV SIZE                   #
# - the size of a packed '!I' value with the address  #
#   attached                                          #
#######################################################
_TTT_PRTCL_PACKED_UNSIGNED_INT_SIZE_ = 37
#######################################################
#                     SERVER PORT                     #
#######################################################
_TTT_SERVER_PORT_ = 13037



#######################################################
#            TO CREATE YOUR OWN CLIENT               #
#######################################################
I have provided a ttt.py that defines all of the 
functions required to send and recieve from a TTT 
server. It may also help explain the protocol better.
An example useage is shown below:
-------------------------------------------------------
import ttt

#create a TTT client socket
client_socket = ttt_init_client_socket()

#set server address here
SERVER_ADDRESS = (<serverIP>, ttt._TTT_SERVER_PORT_)

#send a message to server
ttt.ttt_send_client_msg_to_server(client_socket, <message>, SERVER_ADDRESS)

#receive a message from the server
ttt.ttt_recv_client_msg_from_server(client_socket)
-------------------------------------------------------

#######################################################
#             MAIN CODE CHUNKS EXPLAINED              #
#######################################################
Client workings:

	1. parse cmd line args
	2. play the game
	3. close
	
>>>	2. play the game:
		0. add a fake server response that was requesting the first args to the queue 
		a. get the next item in the queue
		b. if the item from the queue was sent by the client, and we know the server has last requested a int response
			i. then send the data to the server
		c. else if the data was a server response
			i. print the message from the server
			ii. check the action required by client:
				1. terminate connection?
					a. respond with a TTT_PRTCL_TERMINATE to acknowladge endgame
					b. close socket and exit game
				2. expecting first args?
					-send the start_mark (SERVER_MARK or CLIENT_MARK) for who goes first to the server

-------------------------------------------------------

Server workings:
	1. listen to port for messages
	2. create a new thread to deal with message
		a. if a game exists between that connection already
			i. call to pass_client_message with the message recived
		b. else if a game does not exist yet, create a new game
			i. pass this new game the address, unique id, and the command line args value for who goes first
			ii. call to pass_client_message with Null(None) message

>>>	pass_client_message(self, client_message)
		a. checks if game should be ended by client input and game state
			i. send an endgame message to the client
			ii. if the client was the one that requested the termination, then
				delete the game from the active games
		b. checks for if it is currently the clients turn and the message passed exists 
			i. check the validity of the input (single digits only)
				1. try to make the client move
					a. if successful, change the turns
		c. checks for if it is the servers turn (will execute after a client turn [pass_client_message.b] completed)
			i. try to make the server move
				1. if successful, change the turns
		d. checks self game state for if the game has ended
			i. if game has ended then send a terminate message to client, and return from pass_client_message
		e. sends an updated game board to the client with EXPECTING INT RESPONSE
-------------------------------------------------------

